using BinaryProvider # requires BinaryProvider 0.3.0 or later

dependencies = [
    "https://github.com/JuliaLinearAlgebra/OpenBLASBuilder/releases/download/v0.3.0-1/build_OpenBLAS.v0.3.0.jl"
]

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libscsindir"], :indirect),
    LibraryProduct(prefix, ["libscsdir"], :direct),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/juan-pablo-vielma/SCSBuilder/releases/download/v2.0.2-beta3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-gnu.tar.gz", "f070f4992bb81ac916d0ae0dfdb0cb350932ab8cba615f10e1fab7c5e6d307c6"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-gnueabihf.tar.gz", "c8478e74806ac0830f3c69cd277a14b80cc3b235913112e03d75dcd971501c2a"),
    Linux(:i686, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-gnu.tar.gz", "b6ea54e5eacbc857880d02eb47617a501aa084be22d3b58ee6d3d5392b8965d5"),
    Windows(:i686) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-w64-mingw32.tar.gz", "a9f22c6bd5ba17fd3a59d06402fa7b32e998eda31a9cd66904fad43b86c64e55"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.powerpc64le-linux-gnu.tar.gz", "2ed0bf7ebbfd06d0bec2aae30971888127bb7dc3b036d5fbefc8a062d8199333"),
    MacOS(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-apple-darwin14.tar.gz", "f9e53f8d1cf71e2f19c7d5cc0bd03a536ac008444ab8232df50bfcb1614e7b77"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-gnu.tar.gz", "d4e9447d73fa493315d680819396786930fcaa0cb6aeade2310b086d982d39e3"),
    FreeBSD(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-unknown-freebsd11.1.tar.gz", "b3802e17f1b5db734604383c07ea9d63a7575043d2a604e5b8456e78811bba29"),
    Windows(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-w64-mingw32.tar.gz", "ed4da9f68148e9df533ed3c152f7da26724c5b2f6d0891ca7006965b4fa07922"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        for dependency in dependencies          # We do not check for already installed dependencies
            download(dependency,basename(dependency))
            if !success(`$(Base.julia_cmd()) $(basename(dependency))`)
               println("error")
            end
        end      
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
