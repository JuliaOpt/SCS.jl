using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libscsindir"], :indirect),
    LibraryProduct(prefix, ["libscsdir"], :direct),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaOpt/SCSBuilder/releases/download/v2.0.2-beta5"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-gnu.tar.gz", "fad74ea72fa9e6bfa8dda2f82c17044c8f7671576e2a5fe42dd58db07ba1340a"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-gnueabihf.tar.gz", "b3a12a256d04fa565a13db9feef645086b468bee5fdbfbbc279c034184df5167"),
    Linux(:i686, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-gnu.tar.gz", "d9bb472fe19e86d137524dbf24aa4a0261bbc69dd6a295feabef79f44e789219"),
    Windows(:i686) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-w64-mingw32.tar.gz", "1b2cbbb2cf234e0a29cfec4eddef3a3d493bb7874346021b01f7b8d31ebf6a68"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.powerpc64le-linux-gnu.tar.gz", "2c7817bb240e8c438e5a3ec1fdd8cc6fa382d076b2916b842c2285caef6fdbde"),
    MacOS(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-apple-darwin14.tar.gz", "6b89ba9c8f78e09895f54e536d092ce63e2a4b28d182a748dbca1b7d5b17570c"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-gnu.tar.gz", "f2893bd716b12387f6a71ecbf9a34f99649e432d5a1108500a486dbfbd96cf45"),
    FreeBSD(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-unknown-freebsd11.1.tar.gz", "6e53b0b6a3ae433327e3be37325c73dd4ebefc7389accbeedf0b6729f8d434be"),
    Windows(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-w64-mingw32.tar.gz", "c6101d59abce64821474bcb7c61218381e6dc3e2284b410fa5d45a9495e4fab9"),
)
# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
