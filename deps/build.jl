using BinaryProvider, Libdl # requires BinaryProvider 0.3.0 or later

if !(haskey(ENV, "JULIA_SCS_LIBRARY_PATH") || VERSION < v"1.3")
    @info("Installing default SCS binaries")
    exit(0)
end

## NOTE: This is not a typical build.jl file; it has extra stuff toward the bottom.
## Don't just replace this file with the output of a BinaryBuilder repository!

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libscsindir"], :indirect),
    LibraryProduct(prefix, ["libscsdir"], :direct),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/SCS_jll.jl/releases/download/SCS-v2.1.2+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/SCS.v2.1.2.aarch64-linux-gnu.tar.gz", "44ea213f9ee4af866e42a8927693cba9fc9e50351f5d6bb517d027697eea86d5"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/SCS.v2.1.2.aarch64-linux-musl.tar.gz", "5034083865d62361cef5cc75a49dc0bdd0a2179cf9c59faa95a3e5f04ce49180"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/SCS.v2.1.2.armv7l-linux-gnueabihf.tar.gz", "79aa90ab00af9da0ffee247efad5d61a8f1cf2424149cb69cf634ebe4e1dd36a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/SCS.v2.1.2.armv7l-linux-musleabihf.tar.gz", "b5ed835bc14fe159be472bb6b1c0852b1d6cabccdb8c559522aef0e18bafca3a"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/SCS.v2.1.2.i686-linux-gnu.tar.gz", "1643f8a3e144d7baa039f604bc1b3f8bfb8e6c6e745fadf0510d9bea726b39be"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/SCS.v2.1.2.i686-linux-musl.tar.gz", "c405ad185144876ec5716d21e043f77de250ee6b3e64028b824242bd793c0a1d"),
    Windows(:i686) => ("$bin_prefix/SCS.v2.1.2.i686-w64-mingw32.tar.gz", "4dc15a4bfa042fe177244ead4cf358f95bcd1064664261ab9bb7c96fa3d8a607"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/SCS.v2.1.2.powerpc64le-linux-gnu.tar.gz", "e288accc62ed9399dc79d3b4a4c6d5f7a5ae79d83cc7c43b343d53fd423f33fc"),
    MacOS(:x86_64) => ("$bin_prefix/SCS.v2.1.2.x86_64-apple-darwin14.tar.gz", "cb5b40cc9b375a26ac3dc0e5fe6c48f6759bbbcfb9e7527b0a3594b63801307c"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SCS.v2.1.2.x86_64-linux-gnu.tar.gz", "9dfb1860b746b3e4bca45cc620dfd105babc8e570df42634b98c85011e365518"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/SCS.v2.1.2.x86_64-linux-musl.tar.gz", "d58103b9433961cd5b987f28348fbf6bd3411ccc660142fa540dcaf1a12388ce"),
    FreeBSD(:x86_64) => ("$bin_prefix/SCS.v2.1.2.x86_64-unknown-freebsd11.1.tar.gz", "658c38d8103c02953e9a914ea807bf73980dacce0bea66dab24ff4bcb6c3af06"),
    Windows(:x86_64) => ("$bin_prefix/SCS.v2.1.2.x86_64-w64-mingw32.tar.gz", "41b586d25135cfcc78f52522167fb0373c9cf6cdf4eea0b59eb61817f195a024"),
)

this_platform = platform_key_abi()

custom_library = false
if haskey(ENV,"JULIA_SCS_LIBRARY_PATH")

    names_symbols = Dict("libscsdir"=>:direct, "libscsindir"=>:indirect, "libscsgpu"=>:indirectgpu)

    scs_prefix = ENV["JULIA_SCS_LIBRARY_PATH"]
    @assert isdir(scs_prefix)

    custom_products = Product[]
    for fn in readdir(scs_prefix)
        if endswith(fn, Libdl.dlext) && haskey(names_symbols,fn[1:end-3])
            lib = fn[1:end-3]
            push!(custom_products,
                LibraryProduct(scs_prefix, [lib], names_symbols[lib]))
        end
    end

    if all(satisfied(p; verbose=verbose) for p in custom_products)
        products = custom_products
        custom_library = true
    else
        error("Could not install custom libraries from $(ENV["JULIA_SCS_LIBRARY_PATH"]).\nTo fall back to BinaryProvider call delete!(ENV,\"JULIA_SCS_LIBRARY_PATH\") and run build again.")
    end
end

if !custom_library
    # Install unsatisfied or updated dependencies:
    unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)

    dl_info = choose_download(download_info, this_platform)
    if dl_info === nothing && unsatisfied
        # If we don't have a compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
    end

    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
