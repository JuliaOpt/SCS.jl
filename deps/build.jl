using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libscsindir"], :indirect),
    LibraryProduct(prefix, String["libscsdir"], :direct),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/juan-pablo-vielma/SCSBuilder/releases/download/v2.0.2-beta"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-gnu.tar.gz", "f6b9f821091c0ded61100337ce6dd62ae9713c6ea476b054fe0dce98587a4ba7"),
    Linux(:aarch64, :musl) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-musl.tar.gz", "adc76bb705cf773ac0bf1763525c7fb1c09b413c503a700e0828f8daaa8f9723"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-gnueabihf.tar.gz", "de4903ab081c0a199f33ec6aae6e5536036dcd2cd1e2f245c389e27c7ded3a27"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-musleabihf.tar.gz", "f2f5dcccc68265796f5dac8bd40a980a1e05ae21657fd94b9e16e6da2a789648"),
    Linux(:i686, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-gnu.tar.gz", "82be3dac502beb13431dfc31445d2d40e0833baffe5803c4707eb48ac115dc32"),
    Linux(:i686, :musl) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-musl.tar.gz", "4b13656f8929fd391894bf6245241605160ee6233ac1843ff9f54ff2f41beb64"),
    Windows(:i686) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-w64-mingw32.tar.gz", "aa2ed8af6cb8e875d481e69b4729e03a233a70508f3b5f013861f162f5094cc5"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.powerpc64le-linux-gnu.tar.gz", "e88622dfe5ada079f5f8bffce455b2b05e6f9a92adea81503a7a25c20803bc03"),
    MacOS(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-apple-darwin14.tar.gz", "e4280767dc6b9d6e2009d6260e5df720a48faae95270e0eeda6abf31d1b55426"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-gnu.tar.gz", "d3cf8c44f8e848cf5407e10f9969706ca53b956342da4cdcec338a77d7a6e947"),
    Linux(:x86_64, :musl) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-musl.tar.gz", "7aaf8e89cd2603d14c9a810eda17672e479863caecd6a310dd06ac80d4e18639"),
    FreeBSD(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-unknown-freebsd11.1.tar.gz", "9716414086d2f6461cd846bb280c93f1b8993f8c1315ccc18331d3189aa0c422"),
    Windows(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-w64-mingw32.tar.gz", "bc14176c61168ff921be1f961ee832bbd7e54fc5ce8be675600723456b576618"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
