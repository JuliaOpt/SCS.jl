using BinaryProvider # requires BinaryProvider 0.3.0 or later

dependencies = [
    "https://github.com/JuliaLinearAlgebra/OpenBLASBuilder/releases/download/v0.3.0-1/build_OpenBLAS.v0.3.0.jl"
]

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libscsindir"], :indirect),
    LibraryProduct(prefix, ["libscsdir"], :direct),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/juan-pablo-vielma/SCSBuilder/releases/download/v2.0.2-beta3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.aarch64-linux-gnu.tar.gz", "11ca632545b5676f12ddbb17560e34600886291e8a2ae4b5ddbb91f536769823"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/SCSBuilder.v2.0.2.arm-linux-gnueabihf.tar.gz", "fbea426d8e8450941e165a492187e0d45954c659a0dd698ce3daa160c8d006da"),
    Linux(:i686, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-linux-gnu.tar.gz", "10a2971fe442bb3145cc494d476e69e77503831607ca841c078806185c477dcb"),
    Windows(:i686) => ("$bin_prefix/SCSBuilder.v2.0.2.i686-w64-mingw32.tar.gz", "42cd0b3c21e46f9f87434f342d895b4313dff6187b1636fb3d4fba63522b07cd"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.powerpc64le-linux-gnu.tar.gz", "5d896de597eff706806c84a9f557adf108461ce781ec27f51eb6b94e6a1f4cf3"),
    MacOS(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-apple-darwin14.tar.gz", "51e989eaf7d226b29bebab6564f33103891918344e6e417f59064b2d45d42e30"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-linux-gnu.tar.gz", "837ce623d34851b4055b0eaba8348b9833f06a287a05f7a3b8c5fcfa648b956f"),
    FreeBSD(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-unknown-freebsd11.1.tar.gz", "0ccd744c5682fcdaa681177178e95144bcc1d2ffa4cc2826c53c2020e77e5260"),
    Windows(:x86_64) => ("$bin_prefix/SCSBuilder.v2.0.2.x86_64-w64-mingw32.tar.gz", "87c599f0b68a8eecdd3c6d340785a0ba20be6acc7584f11ec125f8fa03d1b337"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        for dependency in dependencies          # We do not check for already installed dependencies
            download(dependency,basename(dependency))
            if !success(`$(Base.julia_cmd()) $(basename(dependency))`)
               println("error")
            end
        end      
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
